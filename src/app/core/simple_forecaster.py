import pandas as pd
import numpy as np
import plotly.graph_objects as go
import warnings
import logging
import traceback
from typing import List, Dict, Any

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
try:
    from .weather_client import WeatherDataClient
    from ..models.schemas import ForecastResponse, HourlyInsolation, PlotData  # –î–æ–±–∞–≤–ª—è–µ–º PlotData
except ImportError:
    from app.core.weather_client import WeatherDataClient
    from app.models.schemas import ForecastResponse, HourlyInsolation, PlotData  # –î–æ–±–∞–≤–ª—è–µ–º PlotData

warnings.filterwarnings("ignore")
logger = logging.getLogger(__name__)


class SimpleSolarForecaster:
    def __init__(self):
        self.weather_client = WeatherDataClient()
        print("‚úÖ SimpleSolarForecaster –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def generate_forecast(self, latitude: float, longitude: float) -> ForecastResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            weather_df = self.weather_client.fetch_weather_data(latitude, longitude)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(weather_df)} —Å—Ç—Ä–æ–∫")

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            historical_df = weather_df[weather_df['date'] < pd.Timestamp.now(tz='UTC').normalize()]
            forecast_df = weather_df[weather_df['date'] >= pd.Timestamp.now(tz='UTC').normalize()]

            print(f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_df)} —Å—Ç—Ä–æ–∫")
            print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(forecast_df)} —Å—Ç—Ä–æ–∫")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_with_pred = self._generate_simple_forecast(historical_df, forecast_df)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            historical_data = self._convert_dataframe_to_insolation_list(historical_df.tail(24), False)
            forecast_data = self._convert_dataframe_to_insolation_list(forecast_with_pred, True)

            print("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞...")
            plot_data = self._prepare_plot_data(historical_df, forecast_with_pred)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")

            # –°–û–ó–î–ê–ï–ú –û–ë–™–ï–ö–¢ PlotData
            plot_data_obj = PlotData(**plot_data)

            return ForecastResponse(
                historical_data=historical_data,
                forecast_data=forecast_data,
                plot_data=plot_data_obj,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç PlotData
                model_type="simple"
            )

        except Exception as error:
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            traceback.print_exc()
            raise

    def _generate_simple_forecast(self, historical_df: pd.DataFrame, forecast_df: pd.DataFrame) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        forecast_with_pred = forecast_df.copy()

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–ì–ù–û–ó –î–õ–Ø –°–ö–û–†–û–°–¢–ò –í–ï–¢–†–ê
        for index, row in forecast_with_pred.iterrows():
            hour = row['date'].hour
            similar_hours = historical_df[historical_df['date'].dt.hour == hour].tail(3)

            if len(similar_hours) > 0:
                avg_ghi = similar_hours['shortwave_radiation'].mean()
                avg_wind = similar_hours['wind_speed_10m'].mean()

                forecast_with_pred.at[index, 'ghi_pred'] = max(0, avg_ghi)
                forecast_with_pred.at[index, 'dni_pred'] = max(0, avg_ghi * 0.7)
                forecast_with_pred.at[index, 'dhi_pred'] = max(0, avg_ghi * 0.3)
                forecast_with_pred.at[index, 'wind_speed_pred'] = max(0, avg_wind)
            else:
                last_value = historical_df['shortwave_radiation'].iloc[-1] if len(historical_df) > 0 else 0
                last_wind = historical_df['wind_speed_10m'].iloc[-1] if len(historical_df) > 0 else 0

                forecast_with_pred.at[index, 'ghi_pred'] = max(0, last_value)
                forecast_with_pred.at[index, 'dni_pred'] = max(0, last_value * 0.7)
                forecast_with_pred.at[index, 'dhi_pred'] = max(0, last_value * 0.3)
                forecast_with_pred.at[index, 'wind_speed_pred'] = max(0, last_wind)

        return forecast_with_pred

    def _convert_dataframe_to_insolation_list(self, df: pd.DataFrame, is_forecast: bool) -> List[HourlyInsolation]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DataFrame –≤ —Å–ø–∏—Å–æ–∫"""
        if is_forecast:
            return [
                HourlyInsolation(
                    datetime=row['date'].isoformat(),
                    ghi=row.get('ghi_pred', 0),
                    dni=row.get('dni_pred', 0),
                    dhi=row.get('dhi_pred', 0),
                    wind_speed=row.get('wind_speed_pred', 0),
                    temperature=row.get('temperature_2m', None)
                )
                for _, row in df.iterrows()
            ]
        else:
            return [
                HourlyInsolation(
                    datetime=row['date'].isoformat(),
                    ghi=row['shortwave_radiation'],
                    dni=row['direct_radiation'],
                    dhi=row['diffuse_radiation'],
                    wind_speed=row['wind_speed_10m'],
                    temperature=row['temperature_2m']
                )
                for _, row in df.iterrows()
            ]

    def _prepare_plot_data(self, historical_df: pd.DataFrame, forecast_df: pd.DataFrame) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –≤–µ—Ç—Ä–æ–º"""
        try:
            print("üé® –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –≤–µ—Ç—Ä–æ–º...")

            historical_last_24h = historical_df.tail(24)

            # –ì—Ä–∞—Ñ–∏–∫ GHI
            ghi_trace = {
                "x": historical_last_24h['date'].dt.strftime('%Y-%m-%d %H:%M').tolist() +
                     forecast_df['date'].dt.strftime('%Y-%m-%d %H:%M').tolist(),
                "y": historical_last_24h['shortwave_radiation'].tolist() +
                     forecast_df['ghi_pred'].tolist(),
                "type": "scatter",
                "mode": "lines",
                "name": "GHI",
                "line": {"color": "#3498db", "width": 3}
            }

            # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞
            wind_trace = {
                "x": historical_last_24h['date'].dt.strftime('%Y-%m-%d %H:%M').tolist() +
                     forecast_df['date'].dt.strftime('%Y-%m-%d %H:%M').tolist(),
                "y": historical_last_24h['wind_speed_10m'].tolist() +
                     forecast_df['wind_speed_pred'].tolist(),
                "type": "scatter",
                "mode": "lines",
                "name": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞",
                "line": {"color": "#27ae60", "width": 3},
                "yaxis": "y2"
            }

            # Layout —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
            layout = {
                "title": "–ü—Ä–æ–≥–Ω–æ–∑: –ò–Ω—Å–æ–ª—è—Ü–∏—è –∏ –°–∫–æ—Ä–æ—Å—Ç—å –í–µ—Ç—Ä–∞",
                "xaxis": {"title": "–í—Ä–µ–º—è"},
                "yaxis": {
                    "title": "–ò–Ω—Å–æ–ª—è—Ü–∏—è (–í—Ç/–º¬≤)",
                    "titlefont": {"color": "#3498db"},
                    "tickfont": {"color": "#3498db"}
                },
                "yaxis2": {
                    "title": "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)",
                    "titlefont": {"color": "#27ae60"},
                    "tickfont": {"color": "#27ae60"},
                    "overlaying": "y",
                    "side": "right"
                },
                "height": 500,
                "showlegend": True,
                "plot_bgcolor": "white",
                "paper_bgcolor": "white"
            }

            return {"traces": [ghi_trace, wind_trace], "layout": layout}

        except Exception as error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {error}")
            return {"traces": [], "layout": {}}